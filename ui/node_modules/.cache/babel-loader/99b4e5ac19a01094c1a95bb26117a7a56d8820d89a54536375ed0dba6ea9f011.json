{"ast":null,"code":"var _jsxFileName = \"/Users/tgaw/Desktop/personal-projects/chekit/ui/src/components/TopMenu.tsx\";\nimport { Popup } from 'react-leaflet';\nimport { Icon } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopMenu = props => {\n  const {\n    mapName,\n    handleClickMenu,\n    handleClickAdd\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"top-menu\",\n    children: [/*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      content: \"I will not flip!\",\n      on: \"click\",\n      pinned: true,\n      trigger: /*#__PURE__*/_jsxDEV(Button, {\n        content: \"Button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"bars\",\n      className: \"menu-button\",\n      onClick: handleClickMenu\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: mapName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Icon, {\n      name: \"plus square outline\",\n      className: \"menu-button\",\n      onClick: handleClickAdd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = TopMenu;\nexport default TopMenu;\nvar _c;\n$RefreshReg$(_c, \"TopMenu\");","map":{"version":3,"names":["Popup","Icon","TopMenu","props","mapName","handleClickMenu","handleClickAdd"],"sources":["/Users/tgaw/Desktop/personal-projects/chekit/ui/src/components/TopMenu.tsx"],"sourcesContent":["import { Popup } from 'react-leaflet';\nimport { Icon } from 'semantic-ui-react';\n\ntype TopMenuProps = {\n    mapName: string;\n    handleClickMenu: () => void;\n    handleClickAdd: () => void;\n}\n\nconst TopMenu: React.FC<TopMenuProps> = (props) => {\n    const { mapName, handleClickMenu, handleClickAdd } = props;\n    return (\n        <div className=\"top-menu\">\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\" />\n            <Popup\n    content='I will not flip!'\n    on='click'\n    pinned\n    trigger={<Button content='Button' />}\n  />\n            <Icon \n                name='bars' \n                className='menu-button'\n                onClick={handleClickMenu}\n            />\n            <div className='title'>{mapName}</div>\n            <Icon \n                name='plus square outline' \n                className='menu-button'\n                onClick={handleClickAdd}\n            />\n        </div>\n    )\n};\n\nexport default TopMenu;"],"mappings":";AAAA,SAASA,KAAK,QAAQ,eAAe;AACrC,SAASC,IAAI,QAAQ,mBAAmB;AAAC;AAQzC,MAAMC,OAA+B,GAAIC,KAAK,IAAK;EAC/C,MAAM;IAAEC,OAAO;IAAEC,eAAe;IAAEC;EAAe,CAAC,GAAGH,KAAK;EAC1D,oBACI;IAAK,SAAS,EAAC,UAAU;IAAA,wBACrB;MAAM,GAAG,EAAC,YAAY;MAAC,IAAI,EAAC;IAA2E;MAAA;MAAA;MAAA;IAAA,QAAG,eAC1G,QAAC,KAAK;MACd,OAAO,EAAC,kBAAkB;MAC1B,EAAE,EAAC,OAAO;MACV,MAAM;MACN,OAAO,eAAE,QAAC,MAAM;QAAC,OAAO,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA,QACrC,eACQ,QAAC,IAAI;MACD,IAAI,EAAC,MAAM;MACX,SAAS,EAAC,aAAa;MACvB,OAAO,EAAEE;IAAgB;MAAA;MAAA;MAAA;IAAA,QAC3B,eACF;MAAK,SAAS,EAAC,OAAO;MAAA,UAAED;IAAO;MAAA;MAAA;MAAA;IAAA,QAAO,eACtC,QAAC,IAAI;MACD,IAAI,EAAC,qBAAqB;MAC1B,SAAS,EAAC,aAAa;MACvB,OAAO,EAAEE;IAAe;MAAA;MAAA;MAAA;IAAA,QAC1B;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAC,KAxBIJ,OAA+B;AA0BrC,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}